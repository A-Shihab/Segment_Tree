#include<bits/stdc++.h>
using namespace std;
 
#define ll long long
#define endl '\n'
#define pb push_back
#define for1(i, n) for (ll i = 0; i < n; i++)
#define fast() ios::sync_with_stdio(false); cin.tie(0)

void build(ll node, ll start, ll end, const vector<ll>& arr, vector<ll>& seg_max, vector<ll>& seg_min) 
{
    if (start == end) 
    {
        seg_max[node] = arr[start];
        seg_min[node] = arr[start];
        return;
    }

    ll mid = (start + end) / 2;
    build(2 * node + 1, start, mid, arr, seg_max, seg_min);
    build(2 * node + 2, mid + 1, end, arr, seg_max, seg_min);

    seg_max[node] = max(seg_max[2 * node + 1], seg_max[2 * node + 2]);
    seg_min[node] = min(seg_min[2 * node + 1], seg_min[2 * node + 2]);
}

ll query_max(ll node,ll start, ll end, ll l, ll r, const vector<ll>& seg_max) 
{
    if (start > r || end < l) return INT_MIN;
    if (start >= l && end <= r) return seg_max[node];

    ll mid = (start + end) / 2;
    ll left = query_max(2 * node + 1, start, mid, l, r, seg_max);
    ll right = query_max(2 * node + 2, mid + 1, end, l, r, seg_max);
    return max(left, right);
}

ll query_min(ll node,ll start, ll end, ll l, ll r, const vector<ll>& seg_min)
{
    if (start > r || end < l) return INT_MAX;
    if (start >= l && end <= r) return seg_min[node];

    ll mid = (start + end) / 2;
    ll left = query_min(2 * node + 1, start, mid, l, r, seg_min);
    ll right = query_min(2 * node + 2, mid + 1, end, l, r, seg_min);
    return min(left, right);
}

int main() 
{
    ll t;
    cin>>t;

    for (ll i = 1; i<= t; ++i)
    {
        ll n,d;
        cin>>n>>d;

        vector<ll> vec(n);
        for1(i, n) cin>>vec[i];

        vector<ll> seg_max(4 * n);
        vector<ll> seg_min(4 * n);
        
        build(0, 0, n - 1, vec, seg_max, seg_min);

        ll max_diff = 0;
        
        for (ll i = 0; i <= n - d; ++i) 
        {
            ll window_max = query_max(0, 0, n - 1, i, i + d - 1, seg_max);
            ll window_min = query_min(0, 0, n - 1, i, i + d - 1, seg_min);
            max_diff = max(max_diff, window_max - window_min);
        }

        cout<<"Case "<<i<<": "<<max_diff<<endl;
    }
}
