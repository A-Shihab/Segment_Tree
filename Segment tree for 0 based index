// Segment tree for 0 based index

#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define endl '\n'
#define pb push_back
#define for1(i, n) for(ll i = 0; i < n; i++)
#define fast() ios::sync_with_stdio(false); cin.tie(0)

void build(ll ind,ll low, ll high, ll arr[], ll seg[])
{
    if(low == high)
    {
        seg[ind] = arr[low];
        return;
    }
    
    ll mid = (low+high)/2;
    
    build(2*ind+1, low, mid, arr, seg);
    build(2*ind+2, mid+1, high, arr, seg);
    seg[ind] = min(seg[2*ind+1],seg[2*ind+2]);
}

ll query(ll ind, ll low, ll high, ll l, ll r, seg[])
{
    // No overloop
    if(high<l || low>high)return INT_MAX;
    
    // Complete overlap
    if(low>=l && high<=r)return seg[ind];
    
    //Partial overlap
    ll mid=(low+high)/2;
    ll left=query(2*ind+1, low, mid, l, r);
    ll right=quer(2*ind+2, mid+1, high, l, r);
    return min(left, right);
}

int main()
{
    fast();
    
    ll n;
    cin>>n;
    
    ll arr[n];
    
    for1(i, n)cin>>arr[i];
    
    ll seg[4*n];
    
    build(0, 0, n-1, arr, seg);
    
    ll q;
    cin>>q;
    
    while(q--)
    {
        ll l, r;
        cin>>l>>r;
        
        cout<<query(0, 0, n-1, l, r, seg)<<endl;
    }
}
